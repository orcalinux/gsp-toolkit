@startuml gsp_multiple_requests_all_success

'──────────────────────── Visual settings ────────────────────────
skinparam ParticipantPadding 120 '
skinparam participant {
    BackgroundColor #053671
    BorderColor     #1e1e1e
    FontColor       white
}
skinparam sequence {
    ArrowColor                 #1e1e1e
    LifeLineBorderColor        #1e1e1e
    LifeLineBackgroundColor    #ff9f1c
    ParticipantBorderColor     #1e1e1e
    ParticipantBackgroundColor #053671
    ParticipantFontColor       white
}

title **BSP Sequence – Multiple Requests All Success Case**

participant "Host App"         as HA
participant "Host Cmd Layer"   as HC
participant "Host DTL Layer"   as HD
participant "Host PHY Layer"   as HP
participant "Target PHY Layer" as TP
participant "Target DTL Layer" as TD
participant "Target Cmd Layer" as TC
participant "Target App"       as TA

autonumber "<b>[0]</b>"

'─── 1) Host issues two commands ────────────────────────────────
activate HA
HA -> HC : sendCommand(cmd1)
HA -> HC : sendCommand(cmd2)
deactivate HA

activate HC
note right of HC
  • frame CRA(cmd1)  
  • frame CRA(cmd2)  
  • start timers(cmd1, cmd2)
end note

'─── 2) Wrap both via DTL ───────────────────────────────────────
HC -> HD : wrapCRA(cmd1)
HC -> HD : wrapCRA(cmd2)
deactivate HC

activate HD
note right of HD
  • SLIP+CRC(cmd1)  
  • SLIP+CRC(cmd2)
end note
HD --> HC : CRA1, CRA2
deactivate HD

'─── 3) Transmit both over PHY ─────────────────────────────────
activate HC
HC -> HP : sendFrame(CRA1)
HC -> HP : sendFrame(CRA2)
deactivate HC

activate HP
HP -> TP : UART bytes (CRA1)
HP -> TP : UART bytes (CRA2)
deactivate HP

'─── 4) Target receives & decodes ───────────────────────────────
activate TP
TP -> TD : deliverBytes() [CRA1]
TP -> TD : deliverBytes() [CRA2]
deactivate TP

activate TD
note right of TD
  • decode+CRC OK(cmd1)  
  • decode+CRC OK(cmd2)
end note
TD -> TC : extractCRA(cmd1)
TD -> TC : extractCRA(cmd2)
deactivate TD

'─── 5) Target executes & prepares responses ────────────────────
activate TC
TC -> TA : deliverCommand(cmd1)
TC -> TA : deliverCommand(cmd2)
deactivate TC

activate TA
TA --> TC : sendResponse(resp1)
TA --> TC : sendResponse(resp2)
deactivate TA

activate TC
note right of TC
  • wrapCRA(resp1)  
  • wrapCRA(resp2)
end note
TC -> TD : wrapCRA(resp1)
TC -> TD : wrapCRA(resp2)
deactivate TC

'─── 6) Target DTL wrap ────────────────────────────────────────
activate TD
note right of TD
  • SLIP+CRC(resp1)  
  • SLIP+CRC(resp2)
end note
TD -> TP : sendFrame(resp1)
TD -> TP : sendFrame(resp2)
deactivate TD

'─── 7) PHY sends responses ─────────────────────────────────────
activate TP
TP -> HP : UART bytes (resp1)
TP -> HP : UART bytes (resp2)
deactivate TP

'─── 8) Host receives & decodes responses ──────────────────────
activate HP
HP -> HD : deliverBytes() [resp1]
HP -> HD : deliverBytes() [resp2]
deactivate HP

activate HD
note right of HD
  • decode+CRC OK(resp1)  
  • decode+CRC OK(resp2)
end note
HD -> HC : extractCRA(resp1)
HD -> HC : extractCRA(resp2)
deactivate HD

activate HC
note right of HC
  • stop timers(cmd1, cmd2)
end note

'─── 9) Host sends ACKs for both ────────────────────────────────
HC -> HA : deliverResponse(resp1)
HC -> HA : deliverResponse(resp2)
deactivate HC

activate HA
HA --> HC : sendACK() [for resp1]
HA --> HC : sendACK() [for resp2]
deactivate HA

activate HC
note right of HC
  • wrapCRA(ACK1)  
  • wrapCRA(ACK2)
end note
HC -> HD : wrapCRA(ACK1)
HC -> HD : wrapCRA(ACK2)
deactivate HC

activate HD
note right of HD
  • build ACK frame1  
  • build ACK frame2
end note
HD --> HC : ACK1, ACK2
deactivate HD

activate HC
HC -> HP : sendFrame(ACK1)
HC -> HP : sendFrame(ACK2)
deactivate HC

activate HP
HP -> TP : UART bytes (ACK1)
HP -> TP : UART bytes (ACK2)
deactivate HP

'───10) Target stops ACK-timers ────────────────────────────────
activate TP
TP -> TD : deliverBytes() [ACK1]
TP -> TD : deliverBytes() [ACK2]
deactivate TP

activate TD
note right of TD
  • extractCRA(ACK1)  
  • extractCRA(ACK2)  
  • stop ACK-timers
end note
deactivate TD

@enduml
